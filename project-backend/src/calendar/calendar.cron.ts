import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { CalendarService } from './calendar.service';
import { NotificationsService } from '../notifications/notifications.service';
import { MailService } from '../mail/mail.service';
import { UsersService } from '../users/users.service';
import { User } from '../users/entities/user.entity';

@Injectable()
export class CalendarCron {
  private readonly logger = new Logger(CalendarCron.name);
  private remindedEvents: Set<string> = new Set();

  constructor(
    private readonly calendarService: CalendarService,
    private readonly notificationsService: NotificationsService,
    private readonly mailService: MailService,
    private readonly usersService: UsersService,
  ) {}

  @Cron(CronExpression.EVERY_MINUTE) // Temporary for testing
  async handleDeadlineReminders() {
    const startTime = new Date().toISOString();
    this.logger.log(`B·∫Øt ƒë·∫ßu c√¥ng vi·ªác nh·∫Øc nh·ªü l·ªãch t·∫°i ${startTime}...`);
    try {
      this.logger.log('T·∫£i danh s√°ch ng∆∞·ªùi d√πng...');
      const users = await this.usersService.findAll();
      this.logger.log(`T√¨m th·∫•y ${users.length} ng∆∞·ªùi d√πng: ${users.map(u => u.email).join(', ')}`);

      for (const user of users) {
        this.logger.log(`Ki·ªÉm tra s·ª± ki·ªán cho ${user.email} (ID ${user.id})`);
        const events = await this.calendarService.findUpcomingDeadlines(user);
        this.logger.log(
          `Ng∆∞·ªùi d√πng ${user.email}: ${events.length} s·ª± ki·ªán - ${JSON.stringify(
            events.map((e) => ({ id: e.id, title: e.title, dueDate: e.dueDate })),
          )}`,
        );

        if (events.length === 0) {
          this.logger.log(`Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë·ªÉ nh·∫Øc nh·ªü cho ${user.email}`);
          continue;
        }

        for (const event of events) {
          const eventKey = `${user.id}-${event.id}`;
          if (this.remindedEvents.has(eventKey)) {
            this.logger.log(`S·ª± ki·ªán "${event.title}" (ID ${event.id}) ƒë√£ ƒë∆∞·ª£c nh·∫Øc nh·ªü cho ${user.email}`);
            continue;
          }

          try {
            if (!event.dueDate) {
              this.logger.warn(`S·ª± ki·ªán "${event.title}" (ID ${event.id}) kh√¥ng c√≥ dueDate, b·ªè qua`);
              continue;
            }

            this.logger.log(`T·∫°o th√¥ng b√°o cho s·ª± ki·ªán "${event.title}" (ID ${event.id})`);
            await this.notificationsService.create({
              userId: user.id,
              message: `üìÖ Nh·∫Øc nh·ªü: S·ª± ki·ªán "${event.title}" s·∫Øp ƒë·∫øn h·∫°n v√†o ${event.dueDate.toISOString()}`,
            });

            this.logger.log(`G·ª≠i email cho ${user.email} v·ªÅ s·ª± ki·ªán "${event.title}" (ID ${event.id})`);
            const emailResult = await this.mailService.sendMail({
              to: user.email,
              subject: `‚è∞ Nh·∫Øc nh·ªü: H·∫°n ch√≥t c·ªßa ${event.title} ƒëang ƒë·∫øn g·∫ßn`,
              text: `K√≠nh g·ª≠i ${user.name},\n\nS·ª± ki·ªán "${event.title}" c√≥ h·∫°n ch√≥t v√†o ${event.dueDate.toISOString()}.\n\nTr√¢n tr·ªçng,\nH·ªá th·ªëng qu·∫£n l√Ω`,
            });

            if (emailResult.success) {
              this.logger.log(`Email g·ª≠i th√†nh c√¥ng ƒë·∫øn ${user.email} cho s·ª± ki·ªán "${event.title}" (ID ${event.id})`);
              this.remindedEvents.add(eventKey);
            } else {
              this.logger.error(`G·ª≠i email th·∫•t b·∫°i cho ${user.email}: ${emailResult.message}`);
            }
          } catch (error) {
            this.logger.error(
              `L·ªói khi x·ª≠ l√Ω s·ª± ki·ªán "${event.title}" (ID ${event.id}) cho ${user.email}: ${error.message}`,
              error.stack,
            );
          }
        }
      }
    } catch (error) {
      this.logger.error(`L·ªói trong c√¥ng vi·ªác nh·∫Øc nh·ªü: ${error.message}`, error.stack);
    }
    this.logger.log(`K·∫øt th√∫c c√¥ng vi·ªác nh·∫Øc nh·ªü l·ªãch t·∫°i ${new Date().toISOString()}`);
  }
}